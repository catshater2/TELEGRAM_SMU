import logging
import pandas as pd
import re
import requests
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
import os

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

EXCEL_FILE = 'user_data.xlsx'

class Form(StatesGroup):
    location = State()
    fio = State()
    confirm_fio = State()
    bs_number = State()
    stages = State()
def get_city_by_coordinates(latitude, longitude):
    url = f"https://nominatim.openstreetmap.org/reverse?lat={latitude}&lon={longitude}&format=json&accept-language=ru"
    headers = {'User-Agent': 'MyBot/1.0 (contact@example.com)'}
    
    try:
        response = requests.get(url, headers=headers, timeout=10)
        data = response.json()
        address = data.get("address", {})
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –∏—â–µ–º –≥–æ—Ä–æ–¥
        city = (address.get('city') or 
                address.get('town') or 
                address.get('village') or 
                address.get('municipality') or 
                address.get('hamlet') or 
                address.get('locality'))
        
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –æ–±—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–π–æ–Ω –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω)
        if not city:
            city = (address.get('county') or 
                    address.get('state_district') or 
                    address.get('region') or 
                    address.get('state'))
        
        # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–õ–æ–∫–∞—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
        if not city:
            logger.warning(f"–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å: {address}")
            return "–õ–æ–∫–∞—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
        
        return city
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        return "–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"

def save_to_excel(user_data: dict, user_id: int):
    current_date = datetime.now().strftime("%d.%m.%Y %H:%M")
    new_data = pd.DataFrame([{
        '–î–∞—Ç–∞': current_date,
        '–†–µ–≥–∏–æ–Ω': user_data.get('region'),
        '–ì–æ—Ä–æ–¥': user_data.get('city', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'),
        '–§–ò–û': user_data.get('fio'),
        '–ù–æ–º–µ—Ä —Å–∞–π—Ç–∞': user_data.get('bs_number'),
        '–≠—Ç–∞–ø': ', '.join(user_data.get('selected_stages', []))
    }])
    
    try:
        df = pd.read_excel(EXCEL_FILE)
        df = pd.concat([df, new_data], ignore_index=True)
    except FileNotFoundError:
        df = new_data
    
    try:
        df.to_excel(EXCEL_FILE, index=False)
    except Exception as e:
        logger.error(f"Excel: {e}")

async def start_handler(message: types.Message, state: FSMContext):
    await state.set_state(Form.location)
    
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=keyboard)

async def process_location(message: types.Message, state: FSMContext):
    if not message.location:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.")
        return
    
    latitude = message.location.latitude
    longitude = message.location.longitude
    city = get_city_by_coordinates(latitude, longitude)
    
    await state.update_data(region=city, city=city, location=(latitude, longitude))
    await state.set_state(Form.fio)
    
    await message.answer(f" –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã!\n –®–∏—Ä–æ—Ç–∞: {latitude}, –î–æ–ª–≥–æ—Ç–∞: {longitude}\n –ì–æ—Ä–æ–¥: {city}\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

async def process_fio(message: types.Message, state: FSMContext):
    fio = message.text.strip()
    
    if not re.match(r"^[–ê-–Ø–∞-—è–Å—ë\s-]+$", fio):
        await message.answer("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–Ω–æ–≤–∞ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã).")
        return
    
    await state.update_data(fio=fio)
    
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
            [types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await state.set_state(Form.confirm_fio)
    await message.answer(f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –§–ò–û: {fio}\n–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'.", reply_markup=keyboard)

async def confirm_fio(message: types.Message, state: FSMContext):
    if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å":
        await state.set_state(Form.fio)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –∑–∞–Ω–æ–≤–æ:")
    elif message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await state.set_state(Form.bs_number)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, XX123456):")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –∏–ª–∏ '–ò–∑–º–µ–Ω–∏—Ç—å'.")

async def station_number(message: types.Message, state: FSMContext):
    text = message.text.upper().strip()
    if not re.match(r'^[A-Z]{2}\d{6}$', text):
        await message.answer("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, XX123456).")
        return
    
    await state.update_data(bs_number=text)
    await state.set_state(Form.stages)
    
    builder = InlineKeyboardBuilder()
    stages = [f'–≠—Ç–∞–ø {i}' for i in range(1, 10)]
    for stage in stages:
        builder.button(text=f"{stage} ‚ùå", callback_data=f"stage_{stage}")
    builder.button(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="done")
    builder.adjust(1)
    
    await message.answer("üîò –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø—ã:", reply_markup=builder.as_markup())

async def process_stages(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get('selected_stages', [])
    
    if callback.data.startswith('stage_'):
        stage = callback.data.split('_', 1)[1]
        if stage in selected:
            selected.remove(stage)
        else:
            selected.append(stage)
        
        await state.update_data(selected_stages=selected)
        
        builder = InlineKeyboardBuilder()
        stages = [f'–≠—Ç–∞–ø {i}' for i in range(1, 10)]
        for s in stages:
            status = '‚úÖ' if s in selected else '‚ùå'
            builder.button(text=f"{s} {status}", callback_data=f"stage_{s}")
        builder.button(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="done")
        builder.adjust(1)
        
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
        await callback.answer()
    
    elif callback.data == 'done':
        if not selected:
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç—Ç–∞–ø", show_alert=True)
            return
        
        user_data = await state.get_data()
        save_to_excel(user_data, callback.from_user.id)
        await callback.message.edit_text("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        await state.clear()
        await callback.answer()

async def send_excel_handler(message: types.Message):
    try:  
        with open(EXCEL_FILE, 'rb') as file: 
            await message.answer_document(
                types.BufferedInputFile(file.read(), filename='–î–∞–Ω–Ω—ã–µ.xlsx'),
                caption='üìÑ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
            )
    except FileNotFoundError:
        await message.answer("–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def cancel_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer('‚ùå –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')

def setup_handlers(dp: Dispatcher):
    dp.message.register(start_handler, Command('start'))
    dp.message.register(send_excel_handler, Command('get_excel'))
    dp.message.register(cancel_handler, Command('cancel'))
    
    dp.message.register(process_location, Form.location)
    dp.message.register(process_fio, Form.fio)
    dp.message.register(confirm_fio, Form.confirm_fio)
    dp.message.register(station_number, Form.bs_number)
    
    dp.callback_query.register(process_stages, Form.stages)

async def main():
    load_dotenv()
    bot_token = os.getenv("BOT_TOKEN")
    
    if not bot_token:
        raise ValueError("BOT_TOKEN –Ω–µ–≤–µ—Ä–Ω—ã–π")
    
    bot = Bot(token=bot_token)
    dp = Dispatcher()
    setup_handlers(dp)
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())