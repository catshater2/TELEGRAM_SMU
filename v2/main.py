import logging
import pandas as pd
import re
import requests
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from dotenv import load_dotenv
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
EXCEL_PROGRESS = 'progress_data.xlsx'
EXCEL_EMPLOYEES = 'employees.xlsx'

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class Form(StatesGroup):
    start_confirmation = State()
    confirm_region = State()
    select_foreman = State()
    select_team = State()
    input_bs_number = State()
    select_stage = State()
    confirm_start_time = State()
    stage_action = State()
    confirm_end_time = State()

class StageData:
    def __init__(self):
        self.stages = {}
    
    def add_stage(self, stage_number: int, start_time: str):
        self.stages[stage_number] = {
            'start': datetime.strptime(start_time, "%H:%M"),
            'end': None,
            'duration': None
        }
    
    def complete_stage(self, stage_number: int, end_time: str):
        end = datetime.strptime(end_time, "%H:%M")
        self.stages[stage_number]['end'] = end
        self.stages[stage_number]['duration'] = end - self.stages[stage_number]['start']

def normalize_time(time_str: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç HH:MM"""
    try:
        time_str = time_str.strip()
        if re.match(r'^\d{1,2}:\d{2}$', time_str):
            hours, minutes = time_str.split(':')
            return f"{int(hours):02d}:{int(minutes):02d}"
        return time_str
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return time_str

def shorten_name(full_name: str) -> str:
    parts = full_name.strip().split()
    if not parts:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    last_name = parts[0]
    initials = []
    if len(parts) > 1:
        initials.append(parts[1][0] + '.')
    if len(parts) > 2:
        initials.append(parts[2][0] + '.')
    return f"{last_name} {' '.join(initials)}"

def get_region_by_coordinates(lat: float, lon: float) -> str:
    url = f"https://nominatim.openstreetmap.org/reverse?lat={lat}&lon={lon}&format=json&accept-language=ru"
    headers = {'User-Agent': 'ConstructionBot/1.0'}
    try:
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        data = response.json()
        return data.get('address', {}).get('state') or "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"

def get_foremen(region: str):
    df = pd.read_excel(EXCEL_EMPLOYEES)
    return df[
        (df['–†–µ–≥–∏–æ–Ω'] == region) & 
        (df['–î–æ–ª–∂–Ω–æ—Å—Ç—å'].str.contains(r'^–ë—Ä–∏–≥–∞–¥–∏—Ä', case=False, regex=True))
    ].reset_index(drop=True)

def get_team_members(region: str):
    df = pd.read_excel(EXCEL_EMPLOYEES)
    return df[
        (df['–†–µ–≥–∏–æ–Ω'] == region) & 
        (~df['–î–æ–ª–∂–Ω–æ—Å—Ç—å'].str.contains(r'^–ë—Ä–∏–≥–∞–¥–∏—Ä', case=False, regex=True))
    ].reset_index(drop=True)

def save_to_excel(user_data: dict):
    try:
        current_date = datetime.now().strftime("%d.%m.%Y")
        stages_data = user_data['stage_data'].stages
        
        rows = []
        for stage, times in stages_data.items():
            rows.append({
                '–î–∞—Ç–∞': current_date,
                '–†–µ–≥–∏–æ–Ω': user_data.get('region'),
                '–ë—Ä–∏–≥–∞–¥–∏—Ä': user_data.get('foreman'),
                '–ö–æ–º–∞–Ω–¥–∞': ', '.join(user_data.get('team', [])),
                '–ù–æ–º–µ—Ä –ë–°': user_data.get('bs_number', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                '–≠—Ç–∞–ø': stage,
                '–ù–∞—á–∞–ª–æ': times['start'].strftime("%H:%M"),
                '–û–∫–æ–Ω—á–∞–Ω–∏–µ': times['end'].strftime("%H:%M") if times['end'] else None,
                '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': str(times['duration']).split('.')[0] if times['duration'] else None
            })

        df = pd.DataFrame(rows)
        file_exists = os.path.exists(EXCEL_PROGRESS)

        if file_exists:
            existing_df = pd.read_excel(EXCEL_PROGRESS)
            df = pd.concat([existing_df, df], ignore_index=True)

        with pd.ExcelWriter(
            EXCEL_PROGRESS,
            engine='openpyxl',
            mode='a' if file_exists else 'w',
            if_sheet_exists='overlay' if file_exists else None
        ) as writer:
            df.to_excel(writer, index=False)
            
        logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel")
        return True
    except PermissionError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: {e}")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

async def start_handler(message: types.Message, state: FSMContext):
    await state.clear()
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="‚úÖ –î–∞"),
        types.KeyboardButton(text="‚ùå –ù–µ—Ç")
    )
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É?",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(Form.start_confirmation)

async def handle_start_confirmation(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –î–∞":
        builder = ReplyKeyboardBuilder()
        builder.add(types.KeyboardButton(
            text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
            request_location=True
        ))
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        await state.set_state(Form.confirm_region)
    else:
        await message.answer("–†–∞–±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        await state.clear()

async def handle_location(message: types.Message, state: FSMContext):
    location = message.location
    region = get_region_by_coordinates(location.latitude, location.longitude).capitalize()
    
    foremen = get_foremen(region)
    if foremen.empty:
        await message.answer("‚ùå –í –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ –Ω–µ—Ç –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –≤—Ä—É—á–Ω—É—é.")
        await state.set_state(Form.confirm_region)
        return
    
    await state.update_data(region=region)
    
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="region_confirm"),
        types.InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="region_edit")
    )
    await message.answer(
        f"–í–∞—à —Ä–µ–≥–∏–æ–Ω: {region}\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=builder.as_markup()
    )

async def handle_manual_region(message: types.Message, state: FSMContext):
    region = message.text.strip().capitalize()
    await state.update_data(region=region)
    
    foremen = get_foremen(region)
    if foremen.empty:
        await message.answer("‚ùå –í –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ –Ω–µ—Ç –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∑–∞–Ω–æ–≤–æ:")
        await state.set_state(Form.confirm_region)
        return
    
    builder = InlineKeyboardBuilder()
    for idx, row in foremen.iterrows():
        short_name = shorten_name(row['–°–æ—Ç—Ä—É–¥–Ω–∏–∫'])
        builder.add(types.InlineKeyboardButton(
            text=short_name,
            callback_data=f"foreman_{idx}"
        ))
    builder.adjust(1)
    
    await state.set_state(Form.select_foreman)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞ –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤:",
        reply_markup=builder.as_markup()
    )

async def region_callback(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "region_edit":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –≤—Ä—É—á–Ω—É—é:")
        await state.set_state(Form.confirm_region)
        return
    
    data = await state.get_data()
    region = data['region']
    
    foremen = get_foremen(region)
    if foremen.empty:
        await callback.message.answer("‚ùå –í –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ –Ω–µ—Ç –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤! –í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∑–∞–Ω–æ–≤–æ:")
        await state.set_state(Form.confirm_region)
        return
    
    builder = InlineKeyboardBuilder()
    for idx, row in foremen.iterrows():
        short_name = shorten_name(row['–°–æ—Ç—Ä—É–¥–Ω–∏–∫'])
        builder.add(types.InlineKeyboardButton(
            text=short_name,
            callback_data=f"foreman_{idx}"
        ))
    builder.adjust(1)
    
    await state.set_state(Form.select_foreman)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞ –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤:",
        reply_markup=builder.as_markup()
    )

async def foreman_selected(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        region = data['region']
        foremen = get_foremen(region)
        
        foreman_id = int(callback.data.split("_")[1])
        if foreman_id >= len(foremen):
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            return
            
        foreman = foremen.iloc[foreman_id]['–°–æ—Ç—Ä—É–¥–Ω–∏–∫']
        await state.update_data(foreman=foreman)
        await show_team_buttons(callback.message, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –±—Ä–∏–≥–∞–¥–∏—Ä–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")

async def show_team_buttons(message: types.Message, state: FSMContext):
    data = await state.get_data()
    team = get_team_members(data['region'])
    
    if team.empty:
        await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø–∞–º.")
        await state.update_data(team=[])
        await show_stage_buttons(message, state)
        return
    
    builder = InlineKeyboardBuilder()
    for idx, row in team.iterrows():
        short_name = shorten_name(row['–°–æ—Ç—Ä—É–¥–Ω–∏–∫'])
        builder.add(types.InlineKeyboardButton(
            text=f"‚ùå {short_name}",
            callback_data=f"member_{idx}"
        ))
    builder.adjust(2)
    builder.row(types.InlineKeyboardButton(
        text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä",
        callback_data="team_done"
    ))
    
    await state.set_state(Form.select_team)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã:",
        reply_markup=builder.as_markup()
    )

async def team_selection(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        region = data['region']
        team_df = get_team_members(region)
        selected = data.get('team', [])
        
        if callback.data == "team_done":
            if not selected:
                await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!", show_alert=True)
                return
            
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ë–° –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–≤–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —à–µ—Å—Ç—å —Ü–∏—Ñ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä VD123456):")
            await state.set_state(Form.input_bs_number)
            return
        
        member_id = int(callback.data.split("_")[1])
        if member_id >= len(team_df):
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            return
            
        member = team_df.iloc[member_id]['–°–æ—Ç—Ä—É–¥–Ω–∏–∫']
        short_name = shorten_name(member)
        
        if member in selected:
            selected.remove(member)
            status = "‚ùå"
        else:
            selected.append(member)
            status = "‚úÖ"
        
        await state.update_data(team=selected)
        
        builder = InlineKeyboardBuilder()
        for idx, row in team_df.iterrows():
            current_member = row['–°–æ—Ç—Ä—É–¥–Ω–∏–∫']
            current_short = shorten_name(current_member)
            current_status = "‚úÖ" if current_member in selected else "‚ùå"
            builder.add(types.InlineKeyboardButton(
                text=f"{current_status} {current_short}",
                callback_data=f"member_{idx}"
            ))
        
        builder.adjust(2)
        builder.row(types.InlineKeyboardButton(
            text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä",
            callback_data="team_done"
        ))
        
        await callback.message.edit_reply_markup(
            reply_markup=builder.as_markup()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")

async def handle_bs_number(message: types.Message, state: FSMContext):
    bs_number = message.text.strip().upper()
    if not re.match(r'^[A-Z]{2}\d{6}$', bs_number):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–≤–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —à–µ—Å—Ç—å —Ü–∏—Ñ—Ä (–ø—Ä–∏–º–µ—Ä: VD123456)")
        return
    
    await state.update_data(bs_number=bs_number)
    await show_stage_buttons(message, state)

async def show_stage_buttons(message: types.Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    for i in range(1, 10):
        builder.add(types.InlineKeyboardButton(
            text=f"–≠—Ç–∞–ø {i}", 
            callback_data=f"stage_{i}"
        ))
    builder.adjust(3)
    
    await state.set_state(Form.select_stage)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø:",
        reply_markup=builder.as_markup()
    )

async def stage_selected(callback: types.CallbackQuery, state: FSMContext):
    stage = int(callback.data.split("_")[1])
    await state.update_data(current_stage=stage)
    
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è",
            callback_data="start_time_confirm"
        ),
        types.InlineKeyboardButton(
            text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è",
            callback_data="start_time_edit"
        )
    )
    
    await state.set_state(Form.confirm_start_time)
    await callback.message.answer(
        f"–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è —ç—Ç–∞–ø–∞ {stage}:",
        reply_markup=builder.as_markup()
    )

async def handle_start_time(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    stage_data: StageData = data.get('stage_data', StageData())
    current_stage = data['current_stage']
    
    if callback.data == "start_time_confirm":
        current_time = datetime.now().strftime("%H:%M")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç—Ç–∞–ø
        if stage_data.stages:
            last_stage = max(stage_data.stages.keys())
            if not stage_data.stages[last_stage]['end']:
                stage_data.complete_stage(last_stage, current_time)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç—Ç–∞–ø
        stage_data.add_stage(current_stage, current_time)
        
    elif callback.data == "start_time_edit":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —ç—Ç–∞–ø–∞ (–ß–ß:–ú–ú):")
        return
    
    await state.update_data(stage_data=stage_data)
    await show_stage_actions(callback.message, state)
    await callback.answer()

async def handle_start_time_input(message: types.Message, state: FSMContext):
    try:
        time_input = normalize_time(message.text)
        if not re.match(r'^(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])$', time_input):
            raise ValueError
        
        data = await state.get_data()
        stage_data: StageData = data.get('stage_data', StageData())
        current_stage = data['current_stage']
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç—Ç–∞–ø
        if stage_data.stages:
            last_stage = max(stage_data.stages.keys())
            if not stage_data.stages[last_stage]['end']:
                stage_data.complete_stage(last_stage, time_input)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç—Ç–∞–ø
        stage_data.add_stage(current_stage, time_input)
        
        await state.update_data(stage_data=stage_data)
        await show_stage_actions(message, state)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:30 –∏–ª–∏ 18:00)")
        await state.set_state(Form.confirm_start_time)

async def show_stage_actions(message: types.Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É",
        callback_data="complete_work"
    ))
    builder.add(types.InlineKeyboardButton(
        text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø",
        callback_data="next_stage"
    ))
    builder.adjust(1)
    
    await state.set_state(Form.stage_action)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )

async def handle_stage_action(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    stage_data: StageData = data['stage_data']
    
    if callback.data == "complete_work":
        current_time = datetime.now().strftime("%H:%M")
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ä–µ–º—è",
                callback_data="end_time_confirm"
            ),
            types.InlineKeyboardButton(
                text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è",
                callback_data="end_time_edit"
            )
        )
        await state.update_data(end_time=current_time)
        await callback.message.answer(
            f"–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {current_time}",
            reply_markup=builder.as_markup()
        )
        await state.set_state(Form.confirm_end_time)
    
    elif callback.data == "next_stage":
        await show_stage_buttons(callback.message, state)
    
    await callback.answer()

async def handle_end_time_confirmation(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    stage_data: StageData = data['stage_data']
    
    if callback.data == "end_time_confirm":
        end_time = data['end_time']
    else:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã (–ß–ß:–ú–ú):")
        return
    
    last_stage = max(stage_data.stages.keys())
    stage_data.complete_stage(last_stage, end_time)
    
    if save_to_excel(data):
        await callback.message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ —Ä–∞–±–æ—Ç–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!")
    
    await state.clear()

async def handle_end_time_input(message: types.Message, state: FSMContext):
    try:
        time_input = normalize_time(message.text)
        if not re.match(r'^(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])$', time_input):
            raise ValueError
        
        data = await state.get_data()
        stage_data: StageData = data['stage_data']
        last_stage = max(stage_data.stages.keys())
        stage_data.complete_stage(last_stage, time_input)
        
        if save_to_excel(data):
            await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ —Ä–∞–±–æ—Ç–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!")
        
        await state.clear()
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:30 –∏–ª–∏ 18:00)")
        await state.set_state(Form.confirm_end_time)

async def cancel_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        '‚ùå –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start',
        reply_markup=types.ReplyKeyboardRemove()
    )

def setup_handlers(dp: Dispatcher):
    dp.message.register(start_handler, Command('start'))
    dp.message.register(cancel_handler, Command('cancel'))
    dp.message.register(handle_start_confirmation, Form.start_confirmation)
    dp.message.register(handle_location, F.location, Form.confirm_region)
    dp.message.register(handle_manual_region, Form.confirm_region)
    dp.message.register(handle_bs_number, Form.input_bs_number)
    dp.message.register(handle_start_time_input, Form.confirm_start_time)
    dp.message.register(handle_end_time_input, Form.confirm_end_time)
    
    dp.callback_query.register(region_callback, F.data.startswith("region_"))
    dp.callback_query.register(foreman_selected, F.data.startswith("foreman_"))
    dp.callback_query.register(team_selection, Form.select_team)
    dp.callback_query.register(stage_selected, F.data.startswith("stage_"))
    dp.callback_query.register(handle_start_time, Form.confirm_start_time)
    dp.callback_query.register(handle_stage_action, Form.stage_action)
    dp.callback_query.register(handle_end_time_confirmation, Form.confirm_end_time)

async def main():
    bot = Bot(token=os.getenv("BOT_TOKEN"))
    dp = Dispatcher()
    setup_handlers(dp)
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
