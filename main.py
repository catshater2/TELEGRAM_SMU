import logging
import pandas as pd
import re
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

EXCEL_FILE = 'user_data.xlsx'

class Form(StatesGroup):
    region = State()
    fio = State()
    bs_number = State()
    stages = State()

def save_to_excel(user_data: dict, user_id: int):
    new_data = pd.DataFrame([{
        'user_id': user_id,
        '–†–µ–≥–∏–æ–Ω': user_data.get('region'),
        '–§–ò–û': user_data.get('fio'),
        '–ù–æ–º–µ—Ä —Å–∞–π—Ç–∞': user_data.get('bs_number'),
        '–≠—Ç–∞–ø': ', '.join(user_data.get('selected_stages', []))
    }])
    
    try:
        df = pd.read_excel(EXCEL_FILE)
        df = pd.concat([df, new_data], ignore_index=True)
    except FileNotFoundError:
        df = new_data
    
    df.to_excel(EXCEL_FILE, index=False)

async def start_handler(message: types.Message, state: FSMContext):
    await state.set_state(Form.region)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:")

async def process_region(message: types.Message, state: FSMContext):
    await state.update_data(region=message.text)
    await state.set_state(Form.fio)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")

async def process_fio(message: types.Message, state: FSMContext):
    await state.update_data(fio=message.text)
    
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"))
    builder.add(types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å"))
    
    await message.answer(
        f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –§–ò–û: {message.text}",
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )
    await state.set_state(Form.bs_number)

async def process_bs_number(message: types.Message, state: FSMContext):
    if message.text == '–ò–∑–º–µ–Ω–∏—Ç—å':
        await state.set_state(Form.fio)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
        return
    
    text = message.text.upper().strip()
    if not re.match(r'^[A-Z]{2}-\d{6}$', text):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ë–° –≤ —Ñ–æ—Ä–º–∞—Ç–µ VD-XXXXXX:")
        return
    
    await state.update_data(bs_number=text)
    await state.set_state(Form.stages)
    
    builder = InlineKeyboardBuilder()
    stages = ['–≠—Ç–∞–ø_1', '–≠—Ç–∞–ø_2', '–≠—Ç–∞–ø_3', '–≠—Ç–∞–ø_4','–≠—Ç–∞–ø_5', '–≠—Ç–∞–ø_6', '–≠—Ç–∞–ø_7', '–≠—Ç–∞–ø_8', '–≠—Ç–∞–ø_9']
    for stage in stages:
        builder.button(
            text=f"{stage.replace('_', ' ')} ‚ùå", 
            callback_data=f"stage_{stage}"
        )
    builder.button(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="done")
    builder.adjust(1)
    
    await message.answer(
        "üîò –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=builder.as_markup()
    )

async def process_stages(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get('selected_stages', [])
    
    if callback.data.startswith('stage_'):
        stage = callback.data.split('_', 1)[1]
        if stage in selected:
            selected.remove(stage)
        else:
            selected.append(stage)
        
        await state.update_data(selected_stages=selected)
        
        builder = InlineKeyboardBuilder()
        stages = ['–≠—Ç–∞–ø_1', '–≠—Ç–∞–ø_2', '–≠—Ç–∞–ø_3', '–≠—Ç–∞–ø_4','–≠—Ç–∞–ø_5', '–≠—Ç–∞–ø_6', '–≠—Ç–∞–ø_7', '–≠—Ç–∞–ø_8', '–≠—Ç–∞–ø_9']
        for s in stages:
            status = '‚úÖ' if s in selected else '‚ùå'
            builder.button(
                text=f"{s.replace('_', ' ')} {status}", 
                callback_data=f"stage_{s}"
            )
        builder.button(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="done")
        builder.adjust(1)
        
        await callback.message.edit_reply_markup(
            reply_markup=builder.as_markup()
        )
        await callback.answer()
    
    elif callback.data == 'done':
        if not selected:
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç—Ç–∞–ø!", show_alert=True)
            return
        
        user_data = await state.get_data()
        save_to_excel(user_data, callback.from_user.id)
        await callback.message.edit_text("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        await state.clear()
        await callback.answer()

async def send_excel_handler(message: types.Message):
    try:
        with open(EXCEL_FILE, 'rb') as file:
            await message.answer_document(
                types.BufferedInputFile(file.read(), filename='–î–∞–Ω–Ω—ã–µ.xlsx'),
                caption='–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
            )
    except FileNotFoundError:
        await message.answer("–§–∞–π–ª–ø—É—Å—Ç")

async def cancel_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer('–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')

def setup_handlers(dp: Dispatcher):
    dp.message.register(start_handler, Command('start'))
    dp.message.register(send_excel_handler, Command('get_excel'))
    dp.message.register(cancel_handler, Command('cancel'))
    
    dp.message.register(process_region, Form.region)
    dp.message.register(process_fio, Form.fio)
    dp.message.register(process_bs_number, Form.bs_number)
    
    dp.callback_query.register(process_stages, Form.stages)

async def main():
    bot = Bot(token="7856193785:AAFhbj0B8TI33LuXJnwA8PimgwM07PauAg8")
    dp = Dispatcher()
    setup_handlers(dp)
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())